{
  "AWSTemplateFormatVersion" : "2010-09-09",
  
  "Description" : "AWS CloudFormation Template for AWS Big Data Boot Camp",
  
  "Parameters" : {
    "KeyName" : {
      "Description" : "Enter name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },

    "AWSAccessKey": {
      "Type": "String",
      "Description" : "Enter AWS Access Key."
    },

    "AWSSecretAccessKey": {
      "Type": "String",
      "Description" : "Enter AWS Secret Access Key."
    },

    "AvailabilityZone" : {
      "Type" : "String",
      "Default" : "us-east-1a",
      "Description" : "Specify AZ in which EC2 instance and Redshift cluster will be running."
    }
  },
  
  "Mappings" : {
    "AWSInstanceType2Arch" : {
      "t1.micro"    : { "Arch" : "64" }
    },

    "AWSRegionArch2AMI" : {
            "us-east-1": { "64": "ami-b7fee2de" }
    }
  },
    
  "Resources" : {     
    "BDVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
      "CidrBlock" : "10.1.0.0/16",
      "EnableDnsSupport": "true",
      "EnableDnsHostnames": "true",
      "Tags" : [
        {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
        {"Key" : "Network", "Value" : "Public" }
      ]}
    },

    "Subnet1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
      "VpcId" : { "Ref" : "BDVPC" },
      "CidrBlock" : "10.1.0.0/24",
      "AvailabilityZone" : { "Ref" : "AvailabilityZone" },
      "Tags" : [
        {"Key" : "Application", "Value" : { "Ref" : "AWS::StackName"} },
        {"Key" : "Network", "Value" : "Public" }
      ]}
    },

    "BDIG" : {
      "Type" : "AWS::EC2::InternetGateway",
      "DependsOn" : "Subnet1",
      "Properties" : {
        "Tags" : [ {"Key" : "Name", "Value" : "BDIG"}]
      }
    },

    "AttachGateway" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
      "DependsOn" : "BDIG",
       "Properties" : {
         "VpcId" : { "Ref" : "BDVPC" },
         "InternetGatewayId" : { "Ref" : "BDIG" }
       }
    },

    "NetworkAcl" : {
      "Type" : "AWS::EC2::NetworkAcl",
      "DependsOn" : "BDVPC",
      "Properties" : {
        "VpcId" : {"Ref" : "BDVPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "InboundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : "NetworkAcl",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "false",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },

    "OutBoundResponsePortsNetworkAclEntry" : {
      "Type" : "AWS::EC2::NetworkAclEntry",
      "DependsOn" : "NetworkAcl",
      "Properties" : {
        "NetworkAclId" : {"Ref" : "NetworkAcl"},
        "RuleNumber" : "100",
        "Protocol" : "6",
        "RuleAction" : "allow",
        "Egress" : "true",
        "CidrBlock" : "0.0.0.0/0",
        "PortRange" : {"From" : "0", "To" : "65535"}
      }
    },

    "SubnetNetworkAclAssociationA" : {
      "Type" : "AWS::EC2::SubnetNetworkAclAssociation",
      "DependsOn" : "NetworkAcl",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet1" },
        "NetworkAclId" : { "Ref" : "NetworkAcl" }
      }
    },

    "BDRT" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : {"Ref" : "BDVPC"},
        "Tags" : [ {"Key" : "Application", "Value" : { "Ref" : "AWS::StackId"} } ]
      }
    },

    "BDRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : "AttachGateway",
      "Properties" : {
        "RouteTableId" : { "Ref" : "BDRT" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "BDIG" }
      }
    },

    "SubnetRouteTableAssociationA" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "DependsOn" : "BDRoute",
      "Properties" : {
        "SubnetId" : { "Ref" : "Subnet1" },
        "RouteTableId" : { "Ref" : "BDRT" }
      }
    },

    "IPAddress1" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "BDClient1",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "BDClient1" }
      }
    },    

    "IPAddress2" : {
      "Type" : "AWS::EC2::EIP",
      "DependsOn" : "BDClient2",
      "Properties" : {
        "Domain" : "vpc",
        "InstanceId" : { "Ref" : "BDClient2" }
      }
    },    

    "BDClient1": {  
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "Subnet1",
      "Metadata" : {
        "Comment1" : "Copying files and installing psql command line utility"
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", "t1.micro", "Arch" ] } ] },
        "InstanceType"   : "t1.micro",
        "SecurityGroupIds" : [ {"Ref" : "BDBootcampSG"} ],
        "SubnetId"  : { "Ref" : "Subnet1" },
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags": [{"Key": "Name","Value": "Workstation 1"}],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "cd /home/ec2-user\n",
          "git clone https://github.com/tyagihas/awsbigdata.git\n",
          "cd ./awsbigdata/kinesisapp\n",
          "/home/ec2-user/ant/bin/ant > build.log\n",
          "chmod 755 *.sh\n",
          "chown -R ec2-user:ec2-user /home/ec2-user\n",
          "echo 'export AWS_ACCESS_KEY=",
          {
            "Ref": "AWSAccessKey"
          },
          "'  >> /home/ec2-user/.bash_profile\n",
          "echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY' >> /home/ec2-user/.bash_profile\n",
          "echo 'export AWS_SECRET_ACCESS_KEY=",
          {
            "Ref": "AWSSecretAccessKey"
          },
          "'  >> /home/ec2-user/.bash_profile\n",
          "echo 'export AWS_SECRET_KEY=$AWS_SECRET_ACCESS_KEY' >> /home/ec2-user/.bash_profile\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"cfn-int setup complete\" '",
          { "Ref": "WaitHandle"},
          "'\n"
        ]]}}        
      }
    },

    "BDClient2": {  
      "Type": "AWS::EC2::Instance",
      "DependsOn" : "Subnet1",
      "Metadata" : {
        "Comment1" : "Copying files and installing psql command line utility"
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                          { "Fn::FindInMap" : [ "AWSInstanceType2Arch", "t1.micro", "Arch" ] } ] },
        "InstanceType"   : "t1.micro",
        "SecurityGroupIds" : [ {"Ref" : "BDBootcampSG"} ],
        "SubnetId"  : { "Ref" : "Subnet1" },
        "KeyName"        : { "Ref" : "KeyName" },
        "Tags": [{"Key": "Name","Value": "Workstation 2"}],
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "#!/bin/bash\n",
          "cd /home/ec2-user\n",
          "git clone https://github.com/tyagihas/awsbigdata.git\n",
          "cd ./awsbigdata/kinesisapp\n",
          "/home/ec2-user/ant/bin/ant > build.log\n",
          "chmod 755 *.sh\n",
          "chown -R ec2-user:ec2-user /home/ec2-user\n",
          "echo 'export AWS_ACCESS_KEY=",
          {
            "Ref": "AWSAccessKey"
          },
          "'  >> /home/ec2-user/.bash_profile\n",
          "echo 'export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY' >> /home/ec2-user/.bash_profile\n",
          "echo 'export AWS_SECRET_ACCESS_KEY=",
          {
            "Ref": "AWSSecretAccessKey"
          },
          "'  >> /home/ec2-user/.bash_profile\n",
          "echo 'export AWS_SECRET_KEY=$AWS_SECRET_ACCESS_KEY' >> /home/ec2-user/.bash_profile\n",
          "/opt/aws/bin/cfn-signal -e 0 -r \"cfn-int setup complete\" '",
          { "Ref": "WaitHandle"},
          "'\n"
        ]]}}        
      }
    },

    "BDBootcampSG" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "DependsOn" : "BDVPC",
      "Properties" : {
        "GroupDescription" : "Enabling HTTP,SSH and Redshift access",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "5439", "ToPort" : "5439", "CidrIp" : "0.0.0.0/0"}
        ],
        "VpcId" : { "Ref" : "BDVPC" }
      }      
    },

    "BDClusterSubnetGroup" : {
      "Type": "AWS::Redshift::ClusterSubnetGroup",
      "DependsOn" : "Subnet1",
      "Properties": {
        "Description" : "Redshift Cluster Subnet Group",
        "SubnetIds" : [{ "Ref" : "Subnet1" }]
      }
    },

    "BDRedshiftCluster" : {
      "Type": "AWS::Redshift::Cluster",
      "DependsOn" : "BDClusterSubnetGroup",
      "Properties": {
        "MasterUsername" : "awsuser",
        "MasterUserPassword" : "Password1",
        "ClusterSubnetGroupName" : { "Ref" : "BDClusterSubnetGroup" },
        "DBName" : "bddb",
        "NodeType" : "dw2.large",
        "ClusterType" : "single-node",
        "VpcSecurityGroupIds" : [{ "Ref" : "BDBootcampSG" }]
      }
    },

    "WaitHandle" : {
      "Type" : "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition" : {
      "Type" : "AWS::CloudFormation::WaitCondition",
      "DependsOn" : "BDClient1",
      "Properties" : {
        "Handle" : {"Ref" : "WaitHandle"},
        "Timeout" : "600"
      }
    }
  },     

  "Outputs" : {
    "Text" : {
      "Value" : "https://s3.amazonaws.com/awsbigdata-boot-camp/awsbigdata_boot_camp_text.pdf",
      "Description" : "Text for Amazon Big Data boot camp"
    },
    "Files" : {
      "Value" : "https://github.com/tyagihas/awsbigdata",
      "Description" : "Hands-on files for Amazon Big Data boot camp"
    },
    "Status" : {
      "Value" : "completed",
      "Description" : "Amazon Big Data boot camp environment is built successfully."
    }
  }
}
